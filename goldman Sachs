Que 1 Print Anagrams Together (Medium GFG)
class Solution{
  public:
    vector<vector<string> > Anagrams(vector<string>& v) {
        //code here
        //make a duplicate v and store sorted strings
        vector<string> temp;
        vector<vector<string>> res;
        for(int i=0;i<v.size();i++){
            string t=v[i];
            sort(t.begin(),t.end());
            temp.push_back(t);
            
        }
        //store unique strings in unique 
      //  vector<string> unique;
      //  unique.push_back()
      set<string> s;
     // return res;
        for(int i=0;i<temp.size();i++)
        {
            s.insert(temp[i]);
        }
        auto it=s.begin();
        for(int i=0;i<s.size();i++){
            vector<string> x;
            for(int j=0;j<temp.size();j++){
               // int ind= it-s.begin();
               string k =*it;
                if(temp[j]==k)
                x.push_back(v[j]);
            }
            res.push_back(x);
            it++;
        }
        return res;
    }
};

Que 2 Overlapping Rectangles
class Solution {
  public:
    int doOverlap(int L1[], int R1[], int L2[], int R2[]) {
        // code here
        return min(R1[0],R2[0])>=max(L1[0],L2[0]) && min(L1[1],L2[1])>=max(R1[1],R2[1]);
    }
};



Que:
class Solution{
public:	
	// #define ull unsigned long long
	/* Function to get the nth ugly number*/
	ull getNthUglyNo(int n) {
	    // code here
	      ull arr[n];
    ull ia=0,ib=0,ic=0, m2=2,m3=3,m5=5,next=1;
    arr[0]=1;
    for(int i=1;i<n;i++){
        next=min(min(m2,m3),m5);
        arr[i]=next;
        if(next==m2){
            ia+=1;
            m2=arr[ia]*2;
        }
        if(next==m3){
            ib+=1;
            m3=arr[ib]*3;
        }
        if(next==m5){
            ic+=1;
            m5=arr[ic]*5;
        }
    }
    return next;
	}
};
